~extensions start~
~extensions import *~

~[DEFINE_SetName]~ -> set787231
~[DEFINE_Create_Set]~ -> ~[DEFINE_SetName]~ := make(map[~[TYPE@1]~]struct{})

~[DEFINE_Add_EXPR_ToSet]~ -> ~[DEFINE_SetName]~[~[EXPR_~[TYPE@1]~]~] = struct{}{}
~[DEFINE_Add_Fixed_EXPR_ToSet]~ -> ~[DEFINE_SetName]~[~[EXPR_~[TYPE@1]~@1]~] = struct{}{}
~[DEFINE_Add_Fixed_VAR_ToSet]~ -> ~[DEFINE_SetName]~[~[VAR_~[TYPE@1]~@1]~] = struct{}{}
~[DEFINE_Add_Fixed_CONST_ToSet]~ -> ~[DEFINE_SetName]~[~[CONST_~[TYPE@1]~@1]~] = struct{}{}
~[DEFINE_Add_CONST_ToSet]~ -> ~[DEFINE_SetName]~[~[CONST_~[TYPE@1]~]~] = struct{}{}

~extensions end~

~main body start~


~template set_add_simple_positive start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_Fixed_VAR_ToSet]~
~[VAR_~[TYPE@1]~@1]~ = func() ~[TYPE@1]~ {
    for k := range ~[DEFINE_SetName]~ {
        return k
    }
    return ~[CONST_~[TYPE@1]~]~
}()
~template end~

~template set_add_simple_negative start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_Fixed_CONST_ToSet]~
~[VAR_~[TYPE@1]~@1]~ = func() ~[TYPE@1]~ {
    for k := range ~[DEFINE_SetName]~ {
        return k
    }
    return ~[CONST_~[TYPE@1]~]~
}()
~template end~

~template set_remove_simple_positive start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_Fixed_EXPR_ToSet]~
~[DEFINE_Add_Fixed_VAR_ToSet]~
delete(~[DEFINE_SetName]~, ~[EXPR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = func() ~[TYPE@1]~ {
    for k := range ~[DEFINE_SetName]~ {
        return k
    }
    return ~[CONST_~[TYPE@1]~]~
}()
~template end~

~template set_remove_simple_negative start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_Fixed_EXPR_ToSet]~
~[DEFINE_Add_Fixed_VAR_ToSet]~
delete(~[DEFINE_SetName]~, ~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = func() ~[TYPE@1]~ {
    for k := range ~[DEFINE_SetName]~ {
        return k
    }
    return ~[CONST_~[TYPE@1]~]~
}()
~template end~

~template set_contains_positive start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_EXPR_ToSet]~
~[DEFINE_Add_Fixed_VAR_ToSet]~
var value7844 ~[TYPE@1]~ = ~[CONST_~[TYPE@1]~]~
if _, exists := ~[DEFINE_SetName]~[~[VAR_~[TYPE@1]~@1]~]; exists {
    value7844 = ~[VAR_~[TYPE@1]~@1]~
}
~[VAR_~[TYPE@1]~@1]~ = value7844
~template end~

~template set_contains_negative start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_CONST_ToSet]~
~[DEFINE_Add_CONST_ToSet]~
var value7845 ~[TYPE@1]~ = ~[CONST_~[TYPE@1]~]~
if _, exists := ~[DEFINE_SetName]~[~[VAR_~[TYPE@1]~@1]~]; exists {
    value7845 = ~[VAR_~[TYPE@1]~@1]~
}
~[VAR_~[TYPE@1]~@1]~ = value7845
~template end~

~template set_size_positive start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_EXPR_ToSet]~
~[DEFINE_Add_Fixed_VAR_ToSet]~
if len(~[DEFINE_SetName]~) != 2 {
    ~[VAR_~[TYPE@1]~@1]~ = ~[CONST_~[TYPE@1]~]~
}
~template end~

~template set_size_negative start~
~[DEFINE_Create_Set]~
~[DEFINE_Add_EXPR_ToSet]~
~[DEFINE_Add_Fixed_VAR_ToSet]~
if len(~[DEFINE_SetName]~) == 2 {
    ~[VAR_~[TYPE@1]~@1]~ = ~[CONST_~[TYPE@1]~]~
}
~template end~

~template set_union_negative start~
set111 := make(map[~[TYPE@1]~]struct{})
set222 := make(map[~[TYPE@1]~]struct{})
set111[~[EXPR_~[TYPE@1]~@1]~] = struct{}{}
set222[~[VAR_~[TYPE@1]~@2]~] = struct{}{}
for k := range set222 {
    set111[k] = struct{}{}
}
if _, ok := set111[~[VAR_~[TYPE@1]~@2]~]; ok {
    ~[VAR_~[TYPE@1]~@2]~ = ~[CONST_~[TYPE@1]~]~
}
~template end~

~template set_remove_positive start~
set111 := make(map[~[TYPE@1]~]struct{})
set222 := make(map[~[TYPE@1]~]struct{})
set111[~[VAR_~[TYPE@1]~@1]~] = struct{}{}
set222[~[VAR_~[TYPE@1]~@1]~] = struct{}{}
set222[~[EXPR_~[TYPE@1]~@2]~] = struct{}{}
for k := range set222 {
    delete(set111, k)
}
value7849 := ~[CONST_~[TYPE@1]~]~
if len(set111) == 0 {
    value7849 = ~[VAR_~[TYPE@1]~@1]~
}
~[VAR_~[TYPE@1]~@1]~ = value7849
~template end~

~template set_disjoint_positive start~
set111 := make(map[~[TYPE@1]~]struct{})
set222 := make(map[~[TYPE@1]~]struct{})
set111[~[VAR_~[TYPE@1]~@1]~] = struct{}{}
set222[~[VAR_~[TYPE@1]~@1]~] = struct{}{}
value78411 := ~[CONST_~[TYPE@1]~]~
if len(set111) == 0 || len(set222) == 0 {
    value78411 = ~[VAR_~[TYPE@1]~@1]~
}
~[VAR_~[TYPE@1]~@1]~ = value78411
~template end~

~main body end~
