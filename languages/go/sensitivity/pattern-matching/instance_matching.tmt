~extensions start~
~extensions import *~
~extensions end~

~main body start~

~helper functions start~

~function simplePatternMatchingString1 start~
func simplePatternMatchingString1(obj interface{}) string {
	if str, ok := obj.(string); ok {
		return strings.ToUpper(str)
	}
	return ""
}
~function end~

~function simplePatternMatchingString2 start~
func simplePatternMatchingString2(obj interface{}) string {
	if str, ok := obj.(string); ok && len(str) > 5 {
		return strings.ToUpper(str)
	}
	return ""
}
~function end~

~helper functions end~

~template pattern_matching_simple_1_positive start~
~[VAR_string@1]~ = simplePatternMatchingString1(~[VAR_string@1]~);
~template end~

~template pattern_matching_simple_1_negative start~
~[VAR_string]~ = simplePatternMatchingString1(~[CONST_int]~);
~template end~

~template pattern_matching_simple_2_negative start~
~[VAR_string]~ = simplePatternMatchingString1(~[VAR_int]~);
~template end~

~template pattern_matching_simple_4_positive start~
~[VAR_string@1]~ = simplePatternMatchingString2(~[VAR_string@1]~);
~template end~

~template pattern_matching_simple_4_negative start~
~[VAR_string]~ = simplePatternMatchingString2(~[CONST_string]~);
~template end~

~template pattern_matching_switch_simple_1_positive start~
var obj interface{} = ~[VAR_string@1]~

switch v := obj.(type) {
	case int:
		~[VAR_string@1]~ = "fixed_string"
	case string:
		~[VAR_string@1]~ = v
	default:
		~[VAR_string@1]~ = "fixed_string_2"
}
~template end~

~template pattern_matching_switch_simple_1_negative start~
var obj interface{} = ~[CONST_int]~

switch v := obj.(type) {
	case int:
		~[VAR_string@1]~ = "fixed_string"
	case string:
		~[VAR_string@1]~ = v
	default:
		~[VAR_string@1]~ = "fixed_string_2"
}
~template end~


~main body end~
