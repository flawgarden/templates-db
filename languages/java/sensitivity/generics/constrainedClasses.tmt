~extensions start~
~[DEFINE_VarName]~ -> constrained09143

~[DEFINE_CreateInterfaceConstrained]~ -> InterfaceConstrainedClass ~[DEFINE_VarName]~ = new InterfaceConstrainedClass<ImplBinaryOpInterfaceClass1>(new ImplBinaryOpInterfaceClass1());
~[DEFINE_CreateInheritanceConstrained]~ -> InheritanceConstrainedClass ~[DEFINE_VarName]~ = new InheritanceConstrainedClass<DerivedBinaryOpClass1, BaseBinaryOpClass>(new DerivedBinaryOpClass1());
~extensions end~

~main body start~

~helper import objects/generics/helpers/GenericClass~
~helper import objects/generics/helpers/GenericClassVariance~

~helper import sensitivity/generics/helpers/InheritanceConstrainedClass~
~helper import sensitivity/generics/helpers/InterfaceConstrainedClass~

~helper import sensitivity/virtuality/helpers/BaseBinaryOpClass~
~helper import sensitivity/virtuality/helpers/BinaryOpInterface~
~helper import sensitivity/virtuality/helpers/DerivedBinaryOpClass~
~helper import sensitivity/virtuality/helpers/ImplBinaryOpInterfaceClass~

~unsupported template new_constrained_generic_class_positive~
~unsupported template new_constrained_generic_class_negative~


~template interface_constrained_generic_class_positive start~
~[DEFINE_CreateInterfaceConstrained]~
~[VAR_String@1]~ = ~[DEFINE_VarName]~.chooseFrom(~[VAR_String@1]~, ~[CONST_String]~);
~template end~

~template interface_constrained_generic_class_negative start~
~[DEFINE_CreateInterfaceConstrained]~
~[VAR_String@1]~ = ~[DEFINE_VarName]~.chooseNone(~[VAR_String@1]~, ~[CONST_String]~);
~template end~

~template inheritance_constrained_generic_class_positive start~
~[DEFINE_CreateInheritanceConstrained]~
~[VAR_String@1]~ = ~[DEFINE_VarName]~.chooseFrom(~[VAR_String@1]~, ~[CONST_String]~);
~template end~

~template inheritance_constrained_generic_class_negative start~
~[DEFINE_CreateInheritanceConstrained]~
~[VAR_String@1]~ = ~[DEFINE_VarName]~.chooseNone(~[VAR_String@1]~, ~[CONST_String]~);
~template end~

~template get_value_from_generic_class_positive start~
GenericClass<String> gc42 = new GenericClass<>(~[VAR_String@1]~);
~[VAR_String@1]~ = gc42.getValue();
~template end~

~template get_value_from_generic_class_negative start~
GenericClass<String> gc42 = new GenericClass<>("fixed_string");
~[VAR_String]~ = gc42.getValue();
~template end~

~template get_object_value_from_generic_class_positive start~
GenericClass<String> gc42 = new GenericClass<>(~[VAR_String@1]~);
~[VAR_String@1]~ = (String) gc42.getObjectValue();
~template end~

~template get_object_value_from_generic_class_negative start~
GenericClass<String> gc42 = new GenericClass<>("fixed_string");
~[VAR_String]~ = (String) gc42.getObjectValue();
~template end~

~template template_extends_variance_positive start~
GenericClass<A> gc42 = new GenericClass<>(new A());
if (GenericClassVariance.extendsVariance(gc42)) {
    ~[VAR_String]~ = "";
}
~template end~

~template template_extends_variance_negative start~
GenericClass<B> gc42 = new GenericClass<>(new B());
if (GenericClassVariance.extendsVariance(gc42)) {
    ~[VAR_String]~ = "";
}
~template end~

~template template_super_variance_positive start~
GenericClass<A> gc42 = new GenericClass<>(new A());
if (GenericClassVariance.superVariance(gc42)) {
    ~[VAR_String]~ = "";
}
~template end~

~template template_super_variance_negative start~
GenericClass<B> gc42 = new GenericClass<>(new B());
if (GenericClassVariance.superVariance(gc42)) {
    ~[VAR_String]~ = "";
}
~template end~

~template template_wildcard_variance_positive start~
GenericClass<C> gc42 = new GenericClass<>(new C());
if (GenericClassVariance.wildcardVariance(gc42)) {
    ~[VAR_String]~ = "";
}
~template end~

~template template_wildcard_variance_negative start~
GenericClass<B> gc42 = new GenericClass<>(new B());
if (GenericClassVariance.wildcardVariance(gc42)) {
    ~[VAR_String]~ = "";
}
~template end~

~main body end~
