~main body start~
~helper import sensitivity/concurrency/helpers/concurrency~

~imports start~
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.Arrays;
import java.util.concurrent.atomic.*;
~imports end~

~template virtual_thread_simple_positive start~
final String tmpUnique42 = ~[VAR_String@1]~;
try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    List<Callable<String>> tasks = List.of(
            () -> tmpUnique42,
            () -> "abc",
            () -> "abd"
    );
    ~[VAR_String@1]~ = executor.invokeAll(tasks).get(0).get();
} catch (Exception e) {
    e.printStackTrace();
}
~template end~

~template virtual_thread_simple_negative start~
final String tmpUnique42 = ~[VAR_String@1]~;
try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    List<Callable<String>> tasks = List.of(
            () -> "abc",
            () -> tmpUnique42,
            () -> "abd"
    );
    ~[VAR_String@1]~ = executor.invokeAll(tasks).get(0).get();
} catch (Exception e) {
    e.printStackTrace();
}
~template end~

~template vthread_set_negative start~
final String tmpUnique42 = ~[VAR_String@1]~;
Wrapper<String> w = new Wrapper<String>(tmpUnique42);
Runnable task = new SettingTask(w, "fixed_string");

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    executor.submit(task).get();
} catch (Exception e) {
    e.printStackTrace();
}
~[VAR_String@1]~ = w.i;
~template end~

~template vthread_set_positive start~
final String tmpUnique42 = ~[VAR_String@1]~;
Wrapper<String> w = new Wrapper<String>(tmpUnique42);
Runnable task = new SettingTask(w, ~[VAR_String@1]~);

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    executor.submit(task).get();
} catch (Exception e) {
    e.printStackTrace();
}
~[VAR_String@1]~ = w.i;
~template end~

~template two_set_vthreads_in_sequence_positive start~
final String tmpUnique42 = ~[VAR_String@1]~;
Wrapper<String> w = new Wrapper<String>(tmpUnique42);
Runnable task1 = new SettingTask(w, "fixedString");
Runnable task2 = new SettingTask(w, tmpUnique42);

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    executor.submit(task1);
    executor.submit(task2);
} catch (Exception e) {
    e.printStackTrace();
}
~[VAR_String@1]~ = w.i;
~template end~

~template two_set_vthreads_in_sequence_negative start~
final String tmpUnique42 = ~[VAR_String@1]~;
Wrapper<String> w = new Wrapper<String>(tmpUnique42);
Runnable task1 = new SettingTask(w, "fixedString");
Runnable task2 = new SettingTask(w, "fixedString2");

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    executor.submit(task1);
    executor.submit(task2);
} catch (Exception e) {
    e.printStackTrace();
}
~[VAR_String@1]~ = w.i;
~template end~

~template two_switching_tasks_concurrent_vthreads_positive start~
final String tmpUnique42 = ~[VAR_String@1]~;
Wrapper<String> w = new Wrapper<String>(tmpUnique42);
Runnable task1 = new SwitchingTask(w, tmpUnique42);
Runnable task2 = new SwitchingTask(w, tmpUnique42);

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    executor.submit(task1);
    executor.submit(task2);
} catch (Exception e) {
    e.printStackTrace();
}
~[VAR_String@1]~ = w.i;
~template end~

~template null_and_restore_condvar_vthreads_positive start~
final String tmpUnique42 = ~[VAR_String@1]~;
NullAndRestore a = new NullAndRestore(tmpUnique42);
Callable<Object> task1 = () -> {
    a.nullMethod();
    return null;
};
Callable<Object> task2 = () -> {
    a.restore();
    return null;
};

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    var futures = executor.invokeAll(Arrays.asList(task1, task2));
    futures.forEach((f) -> {
        try {
            f.get();
        } catch (Exception e) {
        }
    });
} catch (Exception e) {
    e.printStackTrace();
}
~[VAR_String@1]~ = a.get();
~template end~

~template atomic_integer_vthreads_negative start~
AtomicInteger atomicInteger = new AtomicInteger(0);
Callable<Object> task1 = () -> {
    atomicInteger.incrementAndGet();
    return null;
};
Callable<Object> task2 = () -> {
    atomicInteger.incrementAndGet();
    return null;
};

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    var futures = executor.invokeAll(Arrays.asList(task1, task2));
    futures.forEach((f) -> {
        try {
            f.get();
        } catch (Exception e) {
        }
    });
} catch (Exception e) {
    e.printStackTrace();
}
if (atomicInteger.get() == 2) {
    ~[VAR_String]~ = "fixed_string";
}
~template end~

~template atomic_integer_vthreads_restore_positive start~

AtomicInteger atomicInteger = new AtomicInteger(0);
String stringCopy = ~[VAR_String@1]~;

if (atomicInteger.get() == 0) {
    ~[VAR_String@1]~ = "123";
}

Callable<Object> task1 = () -> {
    atomicInteger.incrementAndGet();
    return null;
};
Callable<Object> task2 = () -> {
    atomicInteger.incrementAndGet();
    return null;
};

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    var futures = executor.invokeAll(Arrays.asList(task1, task2));
    futures.forEach((f) -> {
        try {
            f.get();
        } catch (Exception e) {
        }
    });
} catch (Exception e) {
    e.printStackTrace();
}
if (atomicInteger.get() == 2) {
    ~[VAR_String@1]~ = stringCopy;
}

~template end~

~template atomic_integer_vthreads_restore_negative start~

AtomicInteger atomicInteger = new AtomicInteger(0);
String stringCopy = ~[VAR_String@1]~;

if (atomicInteger.get() == 0) {
    ~[VAR_String@1]~ = "123";
}

Callable<Object> task1 = () -> {
    atomicInteger.incrementAndGet();
    return null;
};
Callable<Object> task2 = () -> {
    atomicInteger.incrementAndGet();
    return null;
};

if (atomicInteger.get() == 2) {
    ~[VAR_String@1]~ = stringCopy;
}

try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    var futures = executor.invokeAll(Arrays.asList(task1, task2));
    futures.forEach((f) -> {
        try {
            f.get();
        } catch (Exception e) {
        }
    });
} catch (Exception e) {
    e.printStackTrace();
}

~template end~

~main body end~
