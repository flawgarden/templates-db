~extensions start~
~extensions import *~
~extensions end~

~main body start~
~helper import sensitivity/concurrency/helpers/concurrency~

~template thread_set_negative start~
Wrapper<String> w = new Wrapper<String>(~[VAR_String@1]~);
Runnable task = new SettingTask(w, "");
Thread thread = new Thread(task);
thread.start();
try {
  thread.join();
} catch (InterruptedException e) {
}
~[VAR_String@1]~ = w.i;
~template end~

~template thread_set_positive start~
Wrapper<String> w = new Wrapper<String>("");
Runnable task = new SettingTask(w, ~[VAR_String@1]~);
Thread thread = new Thread(task);
thread.start();
try {
  thread.join();
} catch (InterruptedException e) {
}
~[VAR_String@1]~ = w.i;
~template end~

~template thread_set_nostart_positive start~
Wrapper<String> w = new Wrapper<String>(~[VAR_String@1]~);
Runnable task = new SettingTask(w, "");
Thread thread = new Thread(task);
~[VAR_String@1]~ = w.i;
~template end~

~template two_set_threads_in_sequence_positive start~
Wrapper<String> w = new Wrapper<String>(~[VAR_String@1]~);
Runnable task1 = new SettingTask(w, "");
Runnable task2 = new SettingTask(w, ~[VAR_String@1]~);
Thread thread1 = new Thread(task1);
Thread thread2 = new Thread(task2);

thread1.start();
try {
  thread1.join();
} catch (InterruptedException e) {
}
thread2.start();
try {
  thread2.join();
} catch (InterruptedException e) {
}

~[VAR_String@1]~ = w.i;
~template end~

~template two_set_threads_in_sequence_negative start~
Wrapper<String> w = new Wrapper<String>(~[VAR_String@1]~);
Runnable task1 = new SettingTask(w, "");
Runnable task2 = new SettingTask(w, ~[VAR_String@1]~);
Thread thread1 = new Thread(task1);
Thread thread2 = new Thread(task2);
thread2.start();
try {
  thread2.join();
} catch (InterruptedException e) {
}

thread1.start();
try {
  thread1.join();
} catch (InterruptedException e) {
}
~[VAR_String@1]~ = w.i;
~template end~

~template two_switching_tasks_concurrent_positive start~
Wrapper<String> w = new Wrapper<String>(~[VAR_String@1]~);
Runnable task1 = new SwitchingTask(w, ~[VAR_String@1]~);
Runnable task2 = new SwitchingTask(w, ~[VAR_String@1]~);
Thread thread1 = new Thread(task1);
Thread thread2 = new Thread(task2);
thread1.start();
thread2.start();
try {
  thread1.join();
} catch (InterruptedException e) {
}
try {
  thread2.join();
} catch (InterruptedException e) {
}
~[VAR_String@1]~ = w.i;
~template end~

~template null_and_restore_condvar_positive start~
NullAndRestore a = new NullAndRestore(~[VAR_String@1]~);

Thread thread1 = new Thread(() -> {
  a.nullMethod();
});
Thread thread2 = new Thread(() -> {
  a.restore();
});

thread1.start();
thread2.start();
try {
  thread1.join();
} catch (InterruptedException e) {
}
try {
  thread2.join();
} catch (InterruptedException e) {
}

~[VAR_String@1]~ = a.get();
~template end~

~main body end~
