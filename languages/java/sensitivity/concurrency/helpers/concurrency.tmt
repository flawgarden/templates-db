~class Wrapper start~

public class Wrapper<T> {
   public Wrapper(T t) {
     i = t;
   }
   public T i;
}

~class end~

~class SettingTask start~

public class SettingTask implements Runnable {
  private Wrapper<String> w;
  private String s;

  public SettingTask(Wrapper<String> w, String s) {
    this.w = w;
    this.s = s;
  }

  @Override
  public void run() {
    this.w.i = s;
  }
}

~class end~

~class SwitchingTask start~

public class SwitchingTask implements Runnable {
  private Wrapper<String> w;
  private String s;

  public SwitchingTask(Wrapper<String> w, String s) {
    this.w = w;
    this.s = s;
  }

  @Override
  public void run() {
    synchronized (this.w) {
      if (this.w.i == "") {
        this.w.i = s;
      } else {
        this.w.i = "";
      }
    }
  }
}

~class end~

~class NullAndRestore start~

import java.util.concurrent.locks.*;

public class NullAndRestore {
  private String s;
  private String original;

  public NullAndRestore(String s) {
    this.s = s;
    this.original = s;
  }

  private ReentrantLock lock = new ReentrantLock();
  private Condition setToNull = lock.newCondition();

  public void nullMethod() {
    lock.lock();
    this.s = null;
    setToNull.signalAll();
    lock.unlock();
  }

  public void restore() {
    lock.lock();
    while (this.s != null) {
        try {
          setToNull.await();
        } catch (InterruptedException e) {
          throw new RuntimeException(e);
        }
    }
    this.s = this.original;
    lock.unlock();
  }

  public String get() {
    String ret = null;
    lock.lock();
    ret = this.s;
    lock.unlock();
    return ret;
  }
}

~class end~
