~extensions start~
~extensions import *~
~extensions end~

~main body start~
~helper import sensitivity/concurrency/helpers/concurrency~

~imports start~
import java.util.concurrent.atomic.*;
~imports end~

~template atomic_integer_negative start~

AtomicInteger counter = new AtomicInteger(0);

Thread thread1 = new Thread(() -> counter.incrementAndGet());

thread1.start();

Thread thread2 = new Thread(() -> counter.incrementAndGet());

thread2.start();

try {
  thread1.join();
} catch (InterruptedException e) {
}

try {
  thread2.join();
} catch (InterruptedException e) {
}

if (counter.get() == 2) {
  ~[VAR_String]~ = "";
}

~template end~

~template atomic_integer_restore_positive start~

AtomicInteger counter = new AtomicInteger(0);
String stringCopy = ~[VAR_String@1]~;

if (counter.get() == 0) {
  ~[VAR_String@1]~ = "";
}

Thread thread1 = new Thread(() -> counter.incrementAndGet());

thread1.start();

Thread thread2 = new Thread(() -> counter.incrementAndGet());

thread2.start();

try {
  thread1.join();
} catch (InterruptedException e) {
}
try {
  thread2.join();
} catch (InterruptedException e) {
}

if (counter.get() == 2) {
  ~[VAR_String@1]~ = stringCopy;
}

~template end~

~template atomic_integer_restore_negative start~

AtomicInteger counter = new AtomicInteger(0);
String stringCopy = ~[VAR_String@1]~;

if (counter.get() == 0) {
  ~[VAR_String@1]~ = "";
}

Thread thread1 = new Thread(() -> counter.incrementAndGet());

Thread thread2 = new Thread(() -> counter.incrementAndGet());

if (counter.get() == 2) {
  ~[VAR_String@1]~ = stringCopy;
}

thread1.start();
thread2.start();

try {
  thread1.join();
} catch (InterruptedException e) {
}

try {
  thread2.join();
} catch (InterruptedException e) {
}

~template end~

~main body end~
