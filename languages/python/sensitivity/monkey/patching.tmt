~extensions start~
~extensions import *~
~extensions end~
~main body start~

~helper functions start~

~function newGetArg start~

def newGetArg(self):
    return "fixed_string"

~function end~

~function newGetArgWithArg start~

def newGetArgWithArg(self, arg):
    return self.arg + arg

~function end~

~function mock_capwords start~

def mock_capwords(s, sep=None):
    return "FIXED_STRING"

~function end~

~function new_arg start~

def new_arg(arg):
    return arg

~function end~

~helper functions end~

~helper import sensitivity/monkey/helpers/MonkeyClass~

~imports start~
import string
from string import capwords
~imports end~

~template monkey_patch_class_method_negative start~
MonkeyClass.getArg = newGetArg
tmpInstance = MonkeyClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = tmpInstance.getArg()
~template end~

~template monkey_patch_class_method_positive start~
MonkeyClass.getArg = newGetArg
tmpInstance = MonkeyClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = tmpInstance.getArg()
~template end~

~template monkey_patch_class_method_with_arg_positive start~
MonkeyClass.getArg = newGetArgWithArg
tmpInstance = MonkeyClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = tmpInstance.getArg(~[CONST_~[TYPE@1]~]~)
~template end~

~template monkey_patch_module_function_positive start~
originalCapwords = string.capwords
string.capwords = mock_capwords
string.capwords = originalCapwords
~[VAR_str@1]~ = string.capwords(~[VAR_str@1]~)
~template end~

~template monkey_patch_module_function_negative start~
string.capwords = mock_capwords
~[VAR_str@1]~ = string.capwords(~[VAR_str@1]~)
~template end~

~template monkey_patch_class_property_positive start~
MonkeyClass.arg = new_arg(~[VAR_~[TYPE@1]~@1]~)
instance = MonkeyClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = instance.arg
~template end~

~template monkey_patch_class_property_negative start~
MonkeyClass.arg = new_arg(~[CONST_~[TYPE@1]~@1]~)
instance = MonkeyClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = instance.arg
~template end~

~main body end~
