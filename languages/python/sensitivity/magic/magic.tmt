~extensions start~
~extensions import *~
~extensions end~
~main body start~

~helper import sensitivity/magic/helpers/MagicClass~

~template magic_method_init_positive start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = mc.arg
~template end~

~template magic_method_init_negative start~
mc = MagicClass(~[CONST_~[TYPE@1]~]~)
~[VAR_~[TYPE@1]~@1]~ = mc.arg
~template end~

~template magic_method_str_positive start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = str(mc)
~template end~

~template magic_method_repr_positive start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = repr(mc)
~template end~

~template magic_method_len_positive start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
if len(mc) == 0:
    ~[VAR_~[TYPE@1]~@1]~ = ~[CONST_~[TYPE@1]~]~
~template end~

~template magic_method_len_negative start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
if len(mc) == 1:
    ~[VAR_~[TYPE@1]~@1]~ = ~[CONST_~[TYPE@1]~]~
~template end~

~template magic_method_getitem_positive start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = mc["tmp_string"]
~template end~

~template magic_method_iter_positive start~
mc = MagicClass(~[VAR_~[TYPE@1]~@1]~)
~[VAR_~[TYPE@1]~@1]~ = mc["tmp_string"]
~template end~

~template magic_method_eq_positive start~
mc1 = MagicClass(~[VAR_~[TYPE@1]~@1]~)
mc2 = MagicClass(~[CONST_~[TYPE@1]~]~)
if mc1 == mc2:
    ~[VAR_~[TYPE@1]~@1]~ = ~[CONST_~[TYPE@1]~]~
~template end~

~template magic_method_eq_negative start~
mc1 = MagicClass(~[VAR_~[TYPE@1]~@1]~)
mc2 = MagicClass(~[CONST_~[TYPE@1]~]~)
if mc1 != mc2:
    ~[VAR_~[TYPE@1]~@1]~ = ~[CONST_~[TYPE@1]~]~
~template end~

~main body end~
