~main body start~
~helper import sensitivity/virtuality/helpers/BaseBinaryOpClass~
~helper import sensitivity/virtuality/helpers/DerivedBinaryOpClass~

~imports start~
using HelperClasses;
~imports end~

~template derived_binary_op1_positive start~
BaseBinaryOpClass a12341 = new DerivedBinaryOpClass1();
~[VAR_string@1]~ = a12341.VirtualCall(~[VAR_string@1]~, "");
~template end~

~template derived_binary_op1_negative start~
BaseBinaryOpClass a12341 = new DerivedBinaryOpClass1();
~[VAR_string@1]~ = a12341.VirtualCall("", ~[VAR_string@1]~);
~template end~

~template derived_binary_op2_positive start~
BaseBinaryOpClass a12341 = new DerivedBinaryOpClass2();
~[VAR_string@1]~ = a12341.VirtualCall("", ~[VAR_string@1]~);
~template end~

~template derived_binary_op2_negative start~
BaseBinaryOpClass a12341 = new DerivedBinaryOpClass1();
~[VAR_string@1]~ = a12341.VirtualCall(~[VAR_string@1]~, "");
~template end~

~template base_binary_op_positive start~
BaseBinaryOpClass a12341 = (~[EXPR_bool]~) ? new DerivedBinaryOpClass1() : new DerivedBinaryOpClass2();
~[VAR_string]~ = a12341.VirtualCall("", "");
~template end~

~template base_binary_op_negative start~
BaseBinaryOpClass a12341 = new BaseBinaryOpClass();
~[VAR_string@1]~ = a12341.VirtualCall(~[VAR_string@1]~, ~[VAR_string@1]~);
~template end~

~main body end~
