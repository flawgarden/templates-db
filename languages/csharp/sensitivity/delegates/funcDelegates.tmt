~extensions start~
~extensions import *~

~[DEFINE_DelegateVar]~ -> delegate0912

~[DEFINE_FuncBinary_Snd]~ -> Func<~[TYPE@1]~, ~[TYPE@1]~, ~[TYPE@1]~> ~[DEFINE_DelegateVar]~ = (~[TYPE@1]~ v1, ~[TYPE@1]~ v2) => v2;
~[DEFINE_FuncTernary_Trd]~ -> Func<~[TYPE@1]~, ~[TYPE@1]~, ~[TYPE@1]~, ~[TYPE@1]~> ~[DEFINE_DelegateVar]~ = (~[TYPE@1]~ v1, ~[TYPE@1]~ v2, ~[TYPE@1]~ v3) => v3;
~extensions end~

~main body start~

~template binary_func_call_positive start~
~[DEFINE_FuncBinary_Snd]~
~[VAR_~[TYPE@1]~@1]~ = ~[DEFINE_DelegateVar]~(~[CONST_~[TYPE@1]~]~, ~[VAR_~[TYPE@1]~@1]~);
~template end~

~template binary_func_call_negative start~
~[DEFINE_FuncBinary_Snd]~
~[VAR_~[TYPE@1]~@1]~ = ~[DEFINE_DelegateVar]~(~[VAR_~[TYPE@1]~@1]~, ~[CONST_~[TYPE@1]~]~);
~template end~

~template ternary_func_call_positive start~
~[DEFINE_FuncTernary_Trd]~
~[VAR_~[TYPE@1]~@1]~ = ~[DEFINE_DelegateVar]~(~[CONST_~[TYPE@1]~]~, ~[CONST_~[TYPE@1]~]~, ~[VAR_~[TYPE@1]~@1]~);
~template end~

~template ternary_func_call_negative start~
~[DEFINE_FuncTernary_Trd]~
~[VAR_~[TYPE@1]~@1]~ = ~[DEFINE_DelegateVar]~(~[CONST_~[TYPE@1]~]~, ~[VAR_~[TYPE@1]~@1]~, ~[CONST_~[TYPE@1]~]~);
~template end~

~main body end~
